//
// tf.dc
// TF distributed networking schema.
//

// There are method-like declarations in the DC syntax.  These are used for
// non-stateful messages corresponding to Python methods.  There are two
// flavors of messages in the system: event and plain message.  The difference
// is that events are tied to the world state and get sent with a snapshot,
// while plain messages are sent independently of snapshots and are not tied
// to a world state.  Events would be used for things like explosions, voice
// lines, sound emitting, etc, while plain messages would be used for things
// like RPC and communication with the server.

keyword unreliable;
keyword event;

from direct.distributed2.DistributedObject/AI import DistributedObject/AI

from tf.entity.DistributedEntity import DistributedEntity/AI
from tf.distributed.DistributedGame/AI import DistributedGame/AI
from tf.player.DistributedTFPlayer/AI/OV import DistributedTFPlayer/AI/OV
from tf.actor.DistributedChar/AI import DistributedChar/AI
from tf.distributed.DTestChar/AI import DTestChar/AI
from tf.distributed.World import World/AI
from tf.distributed.DPickupItemBase import DPickupItemBase/AI
from tf.distributed.DAmmoPack/AI import DAmmoPackSmall/AI
from tf.distributed.DAmmoPack/AI import DAmmoPackMedium/AI
from tf.distributed.DAmmoPack/AI import DAmmoPackFull/AI
from tf.distributed.DHealthKit/AI import DHealthKitSmall/AI
from tf.distributed.DHealthKit/AI import DHealthKitMedium/AI
from tf.distributed.DHealthKit/AI import DHealthKitFull/AI
from tf.player.DViewModel/AI import DViewModel/AI
from tf.weapon.DistributedWeapon/AI import DistributedWeapon/AI
from tf.weapon.TFWeapon import TFWeapon/AI
from tf.weapon.DistributedShotgun import DistributedShotgunEngineer/AI
from tf.weapon.DistributedShotgun import DistributedShotgunSoldier/AI
from tf.weapon.DistributedShotgun import DistributedShotgunHeavy/AI
from tf.weapon.DistributedShotgun import DistributedShotgunPyro/AI
from tf.weapon.DistributedShotgun import DistributedScattergunScout/AI
from tf.weapon.DistributedWrench import DistributedWrench/AI
from tf.weapon.DistributedPistol import DistributedPistolEngineer/AI
from tf.weapon.DistributedPistol import DistributedPistolScout/AI
from tf.weapon.DistributedRocketLauncher import DistributedRocketLauncher/AI
from tf.weapon.TFWeaponGun import TFWeaponGun/AI
from tf.weapon.TFWeaponMelee import TFWeaponMelee/AI
from tf.weapon.DWeaponDrop import DWeaponDrop/AI
from tf.weapon.DistributedGrenadeLauncher import DistributedGrenadeLauncher/AI
from tf.object.BaseObject import BaseObject/AI
from tf.object.SentryGun import SentryGun/AI
from tf.object.DistributedDispenser import DistributedDispenser/AI
from tf.object.DistributedTeleporter import DistributedTeleporter/AI
from tf.object.DistributedTeleporter import DistributedTeleporterEntrance/AI
from tf.object.DistributedTeleporter import DistributedTeleporterExit/AI
from tf.weapon.BaseRocket import BaseRocket/AI
from tf.weapon.RocketProjectile import RocketProjectile/AI
from tf.weapon.DPipeBombProjectile import DPipeBombProjectile/AI
from tf.weapon.DistributedBottle import DistributedBottle/AI
from tf.weapon.DistributedShovel import DistributedShovel/AI
from tf.weapon.DistributedBat import DistributedBat/AI
from tf.weapon.DMinigun import DMinigun/AI
from tf.weapon.DistributedFists import DistributedFists/AI
from tf.weapon.DistributedFireAxe import DistributedFireAxe/AI
from tf.weapon.DistributedRevolver import DistributedRevolver/AI
from tf.weapon.DistributedKnife import DistributedKnife/AI
from tf.weapon.DistributedPDA import DistributedConstructionPDA/AI
from tf.weapon.DistributedPDA import DistributedDestructionPDA/AI
from tf.weapon.DistributedToolbox import DistributedToolbox/AI

from tf.distributed.DistributedTeamFlag import DistributedTeamFlag/AI

// Coordinate range (per axis): -21474836.47 to 21474836.47
// Two decimals of precision.
struct Position {
  int32 x / 100;
  int32 y / 100;
  int32 z / 100;
};

// Use this for sending unit vectors on the wire.
struct UnitVector {
  int16 x / 1000;
  int16 y / 1000;
  int16 z / 1000;
};

// Non-unit vector, 4 bytes per axis.  You may prefer sending a UnitVector
// along with a separate magnitude scalar instead of this, as it would use
// fewer bytes.
struct Vector {
  int32 x / 1000;
  int32 y / 1000;
  int32 z / 1000;
};

// Specialization for sending euler angles on the wire.
struct Angles {
  int16 h % 360 / 10;
  int16 p % 360 / 10;
  int16 r % 360 / 10;
};

struct FatAngles {
  float64 h;
  float64 p;
  float64 r;
};

struct Quat {
  int16 r / 10000;
  int16 i / 10000;
  int16 j / 10000;
  int16 k / 10000;
};

// Scale range (per axis): -32.767 to 32.767
// Three decimals of precision.
struct Scale {
  int16 sx / 1000;
  int16 sy / 1000;
  int16 sz / 1000;
};

// Networked data for a single animation layer.
struct AnimLayer {
  uint8 playMode;
  uint16 startCycle / 1000;
  uint16 playCycles / 1000;
  uint16 cycle / 1000; // 2 //
  uint16 prevCycle / 1000; // 2 //

  uint8 weight / 100; // 1

  int32 order; // 4

  int32 sequence; // 4
  uint8 sequenceParity; // 1
};

dclass DistributedObject {
  int32 simulationTime; // 4 //
};

dclass DistributedEntity : DistributedObject {
  int32 parentEntityId; // 4
  Position pos; // 12 //
  Quat rot; // 8 //
  Scale scale; // 6
  // If the server changes this, the client will clear transform interpolation
  // so the entity teleports to the new server transform.
  uint8 teleportParity;
  Vector velocity; // 24 //
  Vector baseVelocity; // 24 //
  int8 team; // 1
  uint16 maxHealth; // 2
  uint16 health; // 2
  uint8 takeDamageMode; // 1

  // 60 bytes

  // Emits a non-spatialized sound from this entity.
  emitSound_sv(uint32 soundIndex, uint8 waveIndex, int16 volume / 100,
               int16 pitch / 100, uint8 channel, uint8 loop) broadcast;
  // Emits a spatialized sound from this entity.
  // The sound follows the entity with `position` offset.
  emitSoundSpatial_sv(uint32 soundIndex, uint8 waveIndex, int16 volume / 100, int16 pitch / 100,
                      uint8 channel, Position position, uint8 loop) broadcast;
};

dclass DistributedGame : DistributedObject {
  string levelName;

  joinGame(string name) clsend airecv;

  doExplosion(Position pos, Scale scale) broadcast;
  doTracer(Position start, Position end) broadcast;
  doTracers(Position start, Position ends[]) broadcast;

  killEvent(int32 killerDoId, int32 assistDoId, int32 weaponDoId, int32 killedDoId) broadcast;
};

dclass DistributedChar : DistributedEntity {
  // Filename of the model.
  string model; // 4

  uint8 skin; // 1

  uint8 playMode;
  uint16 startCycle / 1000;
  uint16 playCycles / 1000;
  int32 sequence;
  int32 animTime;
  uint16 cycle / 1000;
  uint8 playRate / 100;

  // Should client drive cycle/anim time?
  uint8 clientSideAnimation; // 1

  uint8 newSequenceParity; // 1

  AnimLayer animLayers[]; // 30

  // 48 bytes

  // Creates a client-side ragdoll of the character.
  becomeRagdoll(int16 forceJoint, Position forcePosition, Vector forceVector) broadcast ownrecv;
};

dclass DistributedTFPlayer : DistributedChar {
  uint32 tickBase; // 4 //

  string playerName; // 5
  uint8 tfClass; // 1

  // Eye yaw and pitch.
  float64 eyeH;
  float64 eyeP;

  uint8 onGround; // 1
  float64 deathTime; // 8

  uint8 observerMode; // 1
  // DoId of entity we are observing.
  int32 observerTarget; // 4

  uint8 selectedBuilding;

  // The weapons we are carrying.
  int32 weapons[]; // 12
  // The weapon currently deployed.  It's an index into the weapons list.
  int8 lastActiveWeapon;
  int8 activeWeapon; // 1

  uint8 playerState; // 1

  //uint8 airDashing; // 1

  uint16 condition; // 2

  uint16 maxSpeed / 10;

  uint32 buttons;
  uint32 lastButtons;
  //uint32 buttonsPressed;
  //uint32 buttonsReleased;

  FatAngles punchAngle;
  FatAngles punchAngleVel;

  uint8 metal;

  // 46 bytes

  // Client request to change class.
  changeClass(uint8 classId) ownsend airecv;
  die() ownsend airecv;

  swing() broadcast ownrecv;
  speak(uint32 soundIndex) broadcast ownrecv;

  makeAngry() broadcast;

  pushExpression(string) broadcast;

  gib() broadcast ownrecv;
  respawn() broadcast ownrecv;

  pain() broadcast;

  playerCommand(blob) ownsend airecv unreliable;

  // Animation event for doing a gesture or something.
  playerAnimEvent(uint8, uint16) broadcast ownrecv;

  // Sent from AI to owner to set view angles to teleporter exit
  // direction and perform the FOV lerp.
  doTeleport(int16 h % 360 / 10, float64 fovTime, float64 fovStart) ownrecv;
};

dclass DistributedWeapon : DistributedChar {
  int32 playerId;

  uint16 maxAmmo;
  uint16 maxAmmo2;
  uint8 maxClip;
  uint8 maxClip2;
  uint16 ammo;
  uint16 ammo2;
  uint8 clip;
  uint8 clip2;

  float64 nextPrimaryAttack;
  float64 nextSecondaryAttack;
  float64 timeWeaponIdle;
};

dclass TFWeapon : DistributedWeapon {
  uint8 reloadMode;
  uint8 lowered;
  uint8 resetParity;
  uint8 reloadedThroughAnimEvent;
};

dclass TFWeaponGun : TFWeapon {
  doFireEffects() broadcast;
};

dclass TFWeaponMelee : TFWeapon {
};

dclass DTestChar : DistributedChar {
};

dclass DViewModel : DistributedChar {
  // Player the viewmodel belongs to.
  int32 playerId;
};

dclass DistributedPistolEngineer : TFWeaponGun { };
dclass DistributedPistolScout : TFWeaponGun { };

dclass DistributedRocketLauncher : TFWeaponGun {
};

dclass DistributedWrench : TFWeaponMelee {
};

dclass DWeaponDrop : DistributedChar {
};

dclass BaseObject : DistributedChar {
  uint8 objectState;
  int32 builderDoId;
  float64 lookPitch;
  float64 lookYaw;
  uint8 level;
  uint8 upgradeMetal;
};

dclass SentryGun : BaseObject {
  uint16 ammoShells;
  uint16 maxAmmoShells;
  uint16 numRockets;
  uint16 maxRockets;
  uint16 numKills;
  uint16 numAssists;

  muzzleFlash(uint8 muzzle) broadcast;
};

dclass DistributedDispenser : BaseObject {
  uint16 ammoMetal;
  uint32 healingTargets[];
};

dclass DistributedTeleporter : BaseObject {
  uint8 teleState;
  uint8 showingBlur;
  uint8 showingDirectionArrow;
  int16 yawToExit % 360 / 10;
  int16 rechargeTime / 10;
  uint16 timesUsed;
};

dclass DistributedTeleporterEntrance : DistributedTeleporter {

};

dclass DistributedTeleporterExit : DistributedTeleporter {

};

dclass BaseRocket : DistributedChar {
  Vector initialVel;
};

dclass RocketProjectile : BaseRocket {
};

dclass World : DistributedEntity {
};

dclass DistributedBottle : TFWeaponMelee {
};

dclass DistributedShovel : TFWeaponMelee {
};

dclass DMinigun : TFWeaponGun {
  uint8 weaponState;
  float64 barrelTargetVelocity;
  float64 barrelAccelSpeed;
};

dclass DPickupItemBase : DistributedEntity {
  uint8 modelIndex;
  uint8 hidden;
};

dclass DAmmoPackSmall : DPickupItemBase {
};

dclass DAmmoPackMedium : DPickupItemBase {
};

dclass DAmmoPackFull : DPickupItemBase {
};

dclass DHealthKitSmall : DPickupItemBase {
};

dclass DHealthKitMedium : DPickupItemBase {
};

dclass DHealthKitFull : DPickupItemBase {
};

dclass DPipeBombProjectile : DistributedChar {
};

dclass DistributedGrenadeLauncher : TFWeaponGun {
};

dclass DistributedShotgunEngineer : TFWeaponGun { };
dclass DistributedShotgunSoldier : TFWeaponGun { };
dclass DistributedShotgunHeavy : TFWeaponGun { };
dclass DistributedShotgunPyro : TFWeaponGun { };
dclass DistributedScattergunScout : TFWeaponGun { };

dclass DistributedBat : TFWeaponMelee { };

dclass DistributedFists : TFWeaponMelee { };

dclass DistributedFireAxe : TFWeaponMelee { };

dclass DistributedRevolver : TFWeaponGun { };
dclass DistributedKnife : TFWeaponMelee { };

dclass DistributedConstructionPDA : TFWeapon {
  selectBuilding(uint8) clsend airecv;
};

dclass DistributedDestructionPDA : TFWeapon {
  destroyBuilding(uint8) clsend airecv;
};

dclass DistributedToolbox : TFWeapon {
  uint8 rotation;
};

dclass DistributedTeamFlag : DistributedEntity {
  string flagModelName;
};
